R CMD INSTALL
install.packages("roxygen2")
source('~/Desktop/eventDetection/R/ur.za.fast.R', echo=TRUE)
source('~/Desktop/eventDetection/R/aniplot.events.R', echo=TRUE)
source('~/Desktop/eventDetection/R/cbf_red.R', echo=TRUE)
source('~/Desktop/eventDetection/R/cbfs.R', echo=TRUE)
source('~/Desktop/eventDetection/R/eventDetection.R', echo=TRUE)
source('~/Desktop/eventDetection/R/eventExtraction.R', echo=TRUE)
source('~/Desktop/eventDetection/R/stand.R', echo=TRUE)
source('~/Desktop/eventDetection/R/measures_financial.R', echo=TRUE)
source('~/Desktop/eventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/eventDetection/R/plot.events.R', echo=TRUE)
source('~/Desktop/eventDetection/R/detrendc.R', echo=TRUE)
roxygen::roxygenise()
roxygen2::roxygenise()
roxygenize(package.dir = "~/Desktop//eventDetection")
load_all(eventDetection)
library(devtools)
load_all(eventDetection)
load_all('~/Desktop/eventDetection')
load_all('~/Desktop/eventDetection')
document('~/Desktop/eventDetection')
library(tools)
document('~/Desktop/eventDetection')
source('~/Desktop/eventDetection/R/noiseTests.R', echo=TRUE)
roxygenize('.', roclets=c('rd'))
roxygenize('noiseTests.R', roclets=c('rd'))
roxygenize('~/Desktop//eventDetection/R/noiseTests.R', roclets=c('rd'))
roxygenize('~/Desktop//eventDetection/noiseTests.R', roclets=c('rd'))
document
setwd('~/Desktop/eventDetection/R')
document('detrendc.R')
document('~/Desktop/eventDetection/R')
document('~/Desktop/eventDetection')
t=seq(0,1,0.001)
length(t)
t=seq(0.001,1,0.001)
x=6*t+rnorm(1000)
plot(x,ty='l')
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/EventDetection/R/detrendc.R', echo=TRUE)
dtrx=detrendc(x)
plot(dtrx,ty='l')
n = length(x)
t = seq(1, n)
model = summary(fastLm(cbind(1,t), x))
coef = model$coefficients[2,1]
model$adj.r.squared
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
plot(dtrx,ty='l')
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
?legend
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
plot(x,ty='l')
lines(dtrx,col=2)
?legend
plot(x,ty='l')
lines(dtrx,col=2)
legend(10,10,legend=c('x','detrended x'),col=c(1,2),)
legend(10,10,legend=c('x','detrended x'),col=c(1,2),lty=1)
legend(10,12,legend=c('x','detrended x'),col=c(1,2),lty=1)
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
plot(x,ty='l')
lines(dtrx,col=2)
legend(0,12,legend=c('x','detrended x'),col=c(1,2),lty=1)
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
plot(t,x,ty='l',xlab=t,ylab='')
lines(t,dtrx,col=2)
legend(0,12,legend=c('x','detrended x'),col=c(1,2),lty=1)
plot(t,x,ty='l',xlab=t,ylab='')
lines(t,dtrx,col=2)
plot(t,x,ty='l',xlab=t,ylab='')
t=seq(0.001,1,0.001)
x=10*t+rnorm(1000)
dtrx=detrendc(x)
plot(t,x,ty='l',xlab='t',ylab='')
lines(t,dtrx,col=2)
legend(0,12,legend=c('x','detrended x'),col=c(1,2),lty=1)
library(bfast)
?bfast
x=rnorm(1000)
ff=bfast(x,h=0.15, season="dummy", max.iter=1)
bfast
datats
#' is larger than this threshold, the linear trend is substracted from the original time series. Default is 0.85.
plot(simts) # stl object containing simulated NDVI time series
datats <- ts(rowSums(simts$time.series)) # sum of all the components (season,abrupt,remainder)
tsp(datats) <- tsp(simts$time.series) # assign correct time series attributes
plot(datats)
datats
detrendc(datats)
?fastLm
x1 = cbfs(type = 'box', sigma = 1)
x2 = cbfs(type = 'box', sigma = 2)
par(mfrow=c(1,2))
plot(x1,type='l',xlab='t',ylab=expression(x[1]))
plot(x2,type='l',xlab='t',ylab=expression(x[2]))
source('~/Desktop/EventDetection/R/cbfs.R', echo=TRUE)
x1 = cbfs(type = 'box', sigma = 1)
x2 = cbfs(type = 'box', sigma = 2)
par(mfrow=c(1,2))
plot(x1,type='l',xlab='t',ylab=expression(x[1]))
plot(x2,type='l',xlab='t',ylab=expression(x[2]))
source('~/Desktop/EventDetection/R/cbfs.R', echo=TRUE)
par(mfrow=c(2,1))
plot(x1,type='l',xlab='t',ylab=expression(x[1]))
plot(x2,type='l',xlab='t',ylab=expression(x[2]))
par(mfrow=c(1,2))
plot(x1,type='l',xlab='t',ylab=expression(x[1]))
plot(x2,type='l',xlab='t',ylab=expression(x[2]))
x1 = cbfs(type = 'box', sigma = 1)
x2 = cbfs(type = 'box', sigma = 3)
par(mfrow=c(1,2))
plot(x1,type='l',xlab='t',ylab=expression(x[1]))
plot(x2,type='l',xlab='t',ylab=expression(x[2]))
x = cbfs(type = 'box', coeff=0.5, s=1, A=10)
plot(x,type='l',xlab='t',ylab='x')
source('~/Desktop/EventDetection/R/cbf_red.R', echo=TRUE)
x = cbfs(type = 'box', coeff=0.5, s=1, A=10)
plot(x,type='l',xlab='t',ylab='x')
source('~/Desktop/EventDetection/R/cbf_red.R', echo=TRUE)
source('~/Desktop/EventDetection/R/cbf_red.R', echo=TRUE)
source('~/Desktop/EventDetection/R/cbfs.R', echo=TRUE)
source('~/Desktop/EventDetection/R/detrendc.R', echo=TRUE)
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
#' set.seed(12345)
#' n=128
#' types=c('c','b','f','s')
#' shapes=matrix(NA,20,n)
#' for (i in 1:20){
#'   shapes[i,]=cbfs(type=types[sample(1:4,1)])
#' }
#' x=c(t(cbind(shapes,whitenoise)))
#' plot(x,ty='l')
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventExtraction.R', echo=TRUE)
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
#' w=128
#' alpha=0.05
#' events=eventDetection(x,w,alpha)
events
s
x
w
#' w=128
w
plot(x,ty='l')
#' set.seed(12345)
#' n=128
#' types=c('c','b','f','s')
#' shapes=matrix(NA,20,n)
#' for (i in 1:20){
#'   shapes[i,]=cbfs(type=types[sample(1:4,1)])
#' }
#' x=c(t(cbind(shapes,whitenoise)))
#' plot(x,ty='l')
set.seed(12345)
n=128
types=c('c','b','f','s')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
alpha=0.05
events=eventDetection(x,w,alpha)
set.seed(12345)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
alpha=0.05
events=eventDetection(x,w,alpha)
whitenoise=ts2mat2(rnorm(128*20),128)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
alpha=0.05
events=eventDetection(x,w,alpha)
?tail
?floor
floor(3.1)
floor(3.9)
whitenoise=ts2mat([1:(128*20)],128)
whitenoise=ts2mat(c(1:(128*20)),128)
source('~/Desktop/EventDetection/R/ts2mat.R', echo=TRUE)
whitenoise=ts2mat(c(1:(128*20)),128)
dim(whitenoise)
whitenoise[1:20]
whitenoise[1:20,]
whitenoise[1,1:20]
source('~/Desktop/EventDetection/R/ts2mat.R', echo=TRUE)
set.seed(12345)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat2(rnorm(128*20),128)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
tests=noiseTests(x,w,'white')
set.seed(12345)
n=128
types=c('box','rc','cr','sine')
shapes=matrix(NA,20,n)
for (i in 1:20){
shapes[i,]=cbfs(type=types[sample(1:4,1)])
}
whitenoise=ts2mat(rnorm(128*20),128)
x=c(t(cbind(shapes,whitenoise)))
plot(x,ty='l')
w=128
tests=noiseTests(x,w,'white')
w=128
alpha=0.05
events=eventDetection(x,w,alpha)
str(events)
par(mfrow=c(1,1))
plot.events(x,events$start,events$end)
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
plot.events(x,events$start,events$end)
source('~/Desktop/EventDetection/R/plot.events.R', echo=TRUE)
plot.events(x,events$start,events$end)
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
events=eventDetection(x,w,alpha)
plot.events(x,events$start,events$end)
events=eventDetection(x,w,alpha,'art')
plot.events(x,events$start,events$end)
events=eventDetection(x,w,alpha,'real')
plot.events(x,events$start,events$end)
source('~/Desktop/EventDetection/R/EventDetection.R', echo=TRUE)
?PP.test
?ar
?Box.test
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
za_test = ur.za.fast(xx, "both")
za_test = ur.za.fast(x, "both")
za_test
warnings()
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
y=x
n <- length(y)
model='both'
lag=0
datmat <- matrix(NA, n, lag + 4)
idx <- 2:(n - 2)
trend <- seq(1, n)
datmat[, 1:4] <- cbind(y, 1, c(NA, y)[1:n], trend)
colnames(datmat)[1:4] <- c("y", "intercept", "y.l1", "trend")
roll <- function(z) {
du <- c(rep(0, z), rep(1, (n - z)))
dt <- c(rep(0, z), 1:(n - z))
rollmat <- cbind(datmat, du, dt)
roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))
if (is.na(roll.reg)){roll.reg <- coef(summary(lm(as.data.frame(rollmat))))
(roll.reg[2,1]-1.0)/roll.reg[2,2]}else{(roll.reg$coefficients[2] - 1)/roll.reg$stderr[2]}
}
roll(1)
z=1
du <- c(rep(0, z), rep(1, (n - z)))
dt <- c(rep(0, z), 1:(n - z))
rollmat <- cbind(datmat, du, dt)
roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))
roll.reg
roll.reg<-NA
roll.reg$df.residual
roll.reg
NA$a
class(roll.reg)
roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))
class(roll.reg)
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
za_test = ur.za.fast(x, "both")
za_test
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventExtraction.R', echo=TRUE)
source('~/Desktop/EventDetection/R/eventExtraction.R', echo=TRUE)
#' set.seed(12345)
#' x=c(cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
#' aniplot.events(x,w=128,noiseType='white')
#' set.seed(12345)
#' x=c(cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
#' aniplot.events(x,w=128,noiseType='white')
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
library(animation)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
set.seed(12345)
x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
set.seed(12345)
x=c(cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
library(fields)
?xline
set.seed(12345)
x=c(cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))
aniplot.events(x,w=128,noiseType='white')
source('~/Desktop/EventDetection/R/aniplot.events.R', echo=TRUE)
source('~/Desktop/EventDetection/R/measures.R', echo=TRUE)
source('~/Desktop/EventDetection/R/measures.R', echo=TRUE)
source('~/Desktop/EventDetection/R/noiseTests.R', echo=TRUE)
library(RcppArmadillo)
source('~/Desktop/EventDetection/R/ur.za.fast.R', echo=TRUE)
source('~/Documents/Meetings_2012/Rfunctions/measures0307_edited.R', echo=TRUE)
sort
