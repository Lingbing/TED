{
    "contents" : "#' Unit root test for events considering a structrual break\n#' \n#' This function performs unit root test for events considering a structrual break.\n\n#' \n#' @param y a time series\n#' @param model Three choices: 'intercept', 'trend' or 'both')\n#' @param lag a scalar chosen as lag\n#' @export\n\nur.za.fast <- function(y, model = c(\"intercept\", \"trend\", \"both\"), lag = NULL) {\n    n <- length(y)\n    model <- match.arg(model)\n    if (is.null(lag)) \n        lag <- 0\n    lag <- as.integer(lag)\n    datmat <- matrix(NA, n, lag + 4)\n    idx <- 2:(n - 2)\n    trend <- seq(1, n)\n    datmat[, 1:4] <- cbind(y, 1, c(NA, y)[1:n], trend)\n    colnames(datmat)[1:4] <- c(\"y\", \"intercept\", \"y.l1\", \"trend\")\n    if (lag > 0) {\n        for (i in 1:lag) {\n            datmat[, i + 3] <- c(rep(NA, i + 1), diff(y))[1:n]\n        }\n        colnames(datmat) <- c(\"y\", \"y.l1\", \"trend\", paste(\"y.dl\", 1:lag, sep = \"\"))\n    }\n    if (model == \"intercept\") {\n        roll <- function(z) {\n            du <- c(rep(0, z), rep(1, (n - z)))\n            rollmat <- cbind(datmat, du)\n            roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))\n            if (class(roll.reg) != \"list\") {\n                roll.reg <- coef(summary(lm(as.data.frame(rollmat))))\n                (roll.reg[2, 1] - 1)/roll.reg[2, 2]\n            } else {\n                (roll.reg$coefficients[2] - 1)/roll.reg$stderr[2]\n            }\n        }\n        roll.stat <- sapply(idx, roll)\n        cval <- c(-5.34, -4.8, -4.58)\n        bpoint <- which.min(roll.stat)\n    } else if (model == \"trend\") {\n        roll <- function(z) {\n            dt <- c(rep(0, z), 1:(n - z))\n            rollmat <- cbind(datmat, dt)\n            roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))\n            if (class(roll.reg) != \"list\") {\n                roll.reg <- coef(summary(lm(as.data.frame(rollmat))))\n                (roll.reg[2, 1] - 1)/roll.reg[2, 2]\n            } else {\n                (roll.reg$coefficients[2] - 1)/roll.reg$stderr[2]\n            }\n        }\n        roll.stat <- sapply(idx, roll)\n        cval <- c(-4.93, -4.42, -4.11)\n        bpoint <- which.min(roll.stat)\n    } else if (model == \"both\") {\n        roll <- function(z) {\n            du <- c(rep(0, z), rep(1, (n - z)))\n            dt <- c(rep(0, z), 1:(n - z))\n            rollmat <- cbind(datmat, du, dt)\n            roll.reg <- tryCatch(fastLmPure(rollmat[2:dim(rollmat)[1], 2:dim(rollmat)[2]], rollmat[2:dim(rollmat)[1], 1]))\n            if (class(roll.reg) != \"list\") {\n                roll.reg <- coef(summary(lm(as.data.frame(rollmat))))\n                (roll.reg[2, 1] - 1)/roll.reg[2, 2]\n            } else {\n                (roll.reg$coefficients[2] - 1)/roll.reg$stderr[2]\n            }\n        }\n        roll.stat <- sapply(idx, roll)\n        cval <- c(-5.57, -5.08, -4.82)\n        bpoint <- which.min(roll.stat)\n    }\n    teststat <- roll.stat[bpoint]\n    results = list(teststat = teststat, cval = cval, bpoint = bpoint)\n    return(results)\n} \n",
    "created" : 1395538093906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2883053899",
    "id" : "5251A07E",
    "lastKnownWriteTime" : 1395561886,
    "path" : "~/Desktop/EventDetection/R/ur.za.fast.R",
    "project_path" : "R/ur.za.fast.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}