{
    "contents" : "#' Extract events from time series \n#' \n#' This function returns the starting and ending points of events from a time series.\n#' \n#' @param tests test p values from the noist tests for the subsequences\n#' @param w sliding window size\n#' @param alpha the significance level. When the noise test p value of the subsequence is smaller than this significance level,\n#' it is a potential event.\n#' @export\n\neventExtraction <- function(tests, w, alpha = 0.05) {\n    \n    N = length(tests)\n    if (sum(is.na(tests)) == N) {\n        warning(\"All values are missing for the current time series.\")\n        results <- list(start = c(), end = c(), tests = c(), nevents = 0)\n        return(results)\n    } else {\n        values = rep(NA, N)\n        values[which(tests > alpha & tests < 1)] = 2\n        values[which(tests == 1)] = 1\n        values[which(tests <= alpha)] = 0\n        rleevents = rle(values)\n        index1 = which((rleevents$values == 1))\n        tests_new = tests\n        # smoothing \n        i = 1\n        while (i <= length(index1) - 1) {\n            if (sum(rleevents$length[(index1[i] + 1):(index1[i + 1] - 1)] <= ceiling(w/10)) == length(rleevents$length[(index1[i] + \n                1):(index1[i + 1] - 1)])) {\n                tests_new[(sum(rleevents$lengths[1:(index1[i])]) + 1):(sum(rleevents$lengths[1:(index1[i + 1])]))] = 1\n            }\n            i = i + 1\n        }\n        \n        values[which(tests_new > alpha & tests_new < 1)] = 2\n        values[which(tests_new == 1)] = 1\n        values[which(tests_new <= alpha)] = 0\n        rleevents = rle(values)\n        index0 = which((rleevents$values == 0) & (rleevents$lengths >= w/6))\n        # smoothing\n        i = 1\n        while (i <= length(index0) - 1) {\n            if (sum(rleevents$length[(index0[i] + 1):(index0[i + 1] - 1)] <= ceiling(w/10)) == length(rleevents$length[(index0[i] + \n                1):(index0[i + 1] - 1)])) {\n                tests_new[(sum(rleevents$lengths[1:(index0[i])]) + 1):(sum(rleevents$lengths[1:(index0[i + 1])]))] = 0\n            }\n            if ((1 %in% rleevents$values[(index0[i] + 1):(index0[i + 1] - 1)][which(rleevents$length[(index0[i] + 1):(index0[i + \n                1] - 1)] > w/20)]) & (!1 %in% rleevents$values[(index0[i] + 1):(index0[i + 1] - 1)][which(rleevents$length[(index0[i] + \n                1):(index0[i + 1] - 1)] > w)]) & (sum(rleevents$length[(index0[i] + 1):(index0[i + 1] - 1)][which(rleevents$values[(index0[i] + \n                1):(index0[i + 1] - 1)] == 1)]) < w) & (!2 %in% rleevents$values[(index0[i] + 1):(index0[i + 1] - 1)][which(rleevents$length[(index0[i] + \n                1):(index0[i + 1] - 1)] > w/20)]) & (length(which(rleevents$length[(index0[i] + 1):(index0[i + 1] - 1)] < 5)) < \n                3)) {\n                tests_new[(sum(rleevents$lengths[1:(index0[i])]) + 1):(sum(rleevents$lengths[1:(index0[i + 1])]))] = 0\n            }    \n            i = i + 1\n        }\n        \n        # defining potential events\n        events = as.numeric(tests_new < alpha)\n        # potential events should be sequentially enough to indicate the event\n        rleevents = rle(events)\n        lengths = rleevents$lengths\n        eventslengths = lengths[(lengths > w/2) & (rleevents$values == 1)]\n        \n        index = which((lengths > w/2) & (rleevents$values == 1))\n        if (length(index) == 0) {\n            results <- list(start = c(), end = c(), tests = tests_new, nevents = 0)\n            return(results)\n        } else {\n            points = rep(NA, length(index))\n            for (i in 1:length(points)) {\n                points[i] = sum(lengths[1:index[i]])                \n            }           \n            start = points - eventslengths + 1\n            end = points\n            results <- list(start = start, end = end, tests = tests_new, nevents = length(start))\n            return(results)\n        }\n    }\n    \n    \n} \n",
    "created" : 1395537800954.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3882309288",
    "id" : "8AEBDF90",
    "lastKnownWriteTime" : 1395538077,
    "path" : "~/Desktop/EventDetection/R/eventExtraction.R",
    "project_path" : "R/eventExtraction.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}