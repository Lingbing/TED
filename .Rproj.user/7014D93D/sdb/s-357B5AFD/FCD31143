{
    "contents" : "#' Generate a gif for the event detection process\n#' \n#' This function generates a gif file demonstrating how the event detection process is completed.\n\n#'\n#' @param x a time series\n#' @param w a scalar specifying the size of the sliding window\n#' @param noiseType background noise assumed for x. There are two options: white noise or red noise\n#' @param alpha the significance level. When the noise test p value of the subsequence is smaller than this significance level,\n#' it is a potential event.\n#' @param main title of the animiation plot; default is 'Animation plot of events'.\n#' @param xlab x label of the animation plot; default is 't'.\n#' @param ylab y label of the animation plot; default is 'x'.\n#' @param movie.name name of the output gif file; default is 'animation.gif'.\n#' @param interval a positive number to set the time interval of the animation (unit in seconds); default is 0.05.\n#' @param ani.width width of the gif file (unit in px), default is 1000.\n#' @param ani.height height of the gif file (unit in px); default is 400.\n#' @param outdir character: specify the output directory when exporting the animations; default to be the \n#' current working directory.\n#' @export\n#' @examples\n#' set.seed(12345)\n#' x=c(rnorm(128),cbfs(type='box'),rnorm(128),cbfs(type='rc'),rnorm(128))\n#' aniplot.events(x,w=128,noiseType='white')\n\naniplot.events <- function(x, w, noiseType = c(\"white\", \"red\"), alpha = 0.05, main = \"Animation plot of events\", xlab = \"t\", ylab = \"x\", \n    movie.name = \"animation.gif\", interval = 0.05, ani.width = 1000, ani.height = 400, outdir = getwd()) {\n    noiseType <- match.arg(noiseType)\n    tests = c()\n    eventsFound = c()\n    saveGIF(for (i in 1:(length(x) - w)) {\n        xsub = x[(i + 1):(w + i)]\n        testx = noiseTests(xsub, w, noiseType)\n        tests = c(tests, testx)\n        if (testx <= alpha) {\n            if (is.null(eventsFound$start)) {\n                plot(c(1:(w + i)), x[1:(w + i)], ty = \"l\", xlab = xlab, ylab = ylab, col = \"#9FC8DC\", main = main)\n            } else {\n                plot(c(1:(w + i)), x[1:(w + i)], ty = \"l\", xlab = xlab, ylab = ylab, col = \"#9FC8DC\", main = main)\n                for (j in 1:length(a)) {\n                  lines(c(a[j]:b[j]), x[a[j]:b[j]], xlab = xlab, ylab = ylab, col = \"#ff53a9\")\n                  xline(a[j], lty = 2, col = \"#ff53a9\")\n                  xline(b[j], lty = 2, col = \"#ff53a9\")\n                }\n            }\n            lines(c((i + 1):(w + i)), x[(i + 1):(w + i)], xlab = xlab, ylab = ylab, col = \"#ff53a9\")\n        } else if (testx > alpha) {\n            eventsFound = eventExtraction(tests, w, alpha)\n            if (is.null(eventsFound$start)) {\n                plot(c(1:(w + i)), x[1:(w + i)], ty = \"l\", xlab = xlab, ylab = ylab, col = \"#9FC8DC\", main = main)\n            } else {\n                a = ceiling((eventsFound$start + eventsFound$end)/2)\n                b = a + w - 1\n                plot(c(1:(w + i)), x[1:(w + i)], ty = \"l\", xlab = xlab, ylab = ylab, col = \"#9FC8DC\", main = main)\n                for (j in 1:length(a)) {\n                  lines(c(a[j]:b[j]), x[a[j]:b[j]], xlab = xlab, ylab = ylab, col = \"#ff53a9\")\n                  xline(a[j], lty = 2, col = \"#ff53a9\")\n                  xline(b[j], lty = 2, col = \"#ff53a9\")\n                }\n            }\n        }\n    }, movie.name = movie.name, interval = interval, ani.width = ani.width, ani.height = ani.height, out.dir = outdir)\n} \n",
    "created" : 1395561917611.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2967286075",
    "id" : "FCD31143",
    "lastKnownWriteTime" : 1395537953,
    "path" : "~/Desktop/EventDetection/R/aniplot.events.R",
    "project_path" : "R/aniplot.events.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}